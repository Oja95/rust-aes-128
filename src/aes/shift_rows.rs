use crate::aes::BLOCK_SIZE;

pub(crate) fn shift_rows(input: &mut [u8; 16]) {
    let mut shift_step = 0;
    for i in (0..BLOCK_SIZE).step_by(4) {
        input[i..i + 4].rotate_left(shift_step);
        shift_step += 1;
    }
}

pub(crate) fn inverse_shift_rows(input: &mut [u8; 16]) {
    let mut shift_step = 0;
    for i in (0..BLOCK_SIZE).step_by(4) {
        input[i..i + 4].rotate_right(shift_step);
        shift_step += 1;
    }
}

#[test]
fn test_shift_rows() {
    let mut test_key: [u8; 16] = [0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75];
    shift_rows(&mut test_key);
    assert_eq!(test_key, [0x54, 0x68, 0x61, 0x74, 0x20, 0x6D, 0x79, 0x73, 0x75, 0x6E, 0x20, 0x4B, 0x75, 0x67, 0x20, 0x46]);
}

#[test]
fn test_inverse_shift_rows() {
    let mut test_key: [u8; 16] = [0x54, 0x68, 0x61, 0x74, 0x20, 0x6D, 0x79, 0x73, 0x75, 0x6E, 0x20, 0x4B, 0x75, 0x67, 0x20, 0x46];
    inverse_shift_rows(&mut test_key);
    assert_eq!(test_key, [0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75]);
}