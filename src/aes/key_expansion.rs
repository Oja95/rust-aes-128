use crate::aes::substitution::substitute;
use crate::aes::BLOCK_SIZE;
use crate::aes::NUM_ROUNDS;

// Round constants, defines by 2^(i-1) % 256, where i is the round
const R_CON: [u8; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];

// https://en.wikipedia.org/wiki/AES_key_schedule
pub(crate) fn key_expansion(key: &[u8; BLOCK_SIZE]) -> [[u8; BLOCK_SIZE]; NUM_ROUNDS + 1] {
    let mut result = [[0u8; BLOCK_SIZE]; NUM_ROUNDS + 1];
    result[0] = *key;

    // Derive each key from previous
    for i in 1..=NUM_ROUNDS {
        // Step #1, Rotate bytes of last word of the previous round one bit left.
        let mut previous_round_last_word = result[i - 1][12..16].to_vec().clone();
        previous_round_last_word.rotate_left(1);

        // Step #2, then substitute bytes using S-box
        substitute(&mut previous_round_last_word);

        // Step #3, then RCON XOR
        previous_round_last_word[0] ^= R_CON[i - 1];

        // First word for the new round is derived from previous round last word
        for j in 0..4 {
            result[i][j] = result[i - 1][j] ^ previous_round_last_word[j];
        }

        // Next words for a round derived from previous word in that same round
        for j in 4..BLOCK_SIZE {
            result[i][j] = result[i - 1][j] ^ result[i][j - 4];
        }
    }

    result
}

pub(crate) fn add_round_key(input: &mut [u8; 16], round_key: &[u8; 16]) {
    for i in 0..BLOCK_SIZE {
        input[i] ^= round_key[i];
    }
}

#[test]
fn test_key_expansion() {
    let test_key: [u8; 16] = [0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75];

    let round_keys = key_expansion(&test_key);

    assert_eq!(test_key, round_keys[0]);
    assert_eq!([0xE2, 0x32, 0xFC, 0xF1, 0x91, 0x12, 0x91, 0x88, 0xB1, 0x59, 0xE4, 0xE6, 0xD6, 0x79, 0xA2, 0x93], round_keys[1]);
    assert_eq!([0x56, 0x08, 0x20, 0x07, 0xC7, 0x1A, 0xB1, 0x8F, 0x76, 0x43, 0x55, 0x69, 0xA0, 0x3A, 0xF7, 0xFA], round_keys[2]);
    assert_eq!([0xD2, 0x60, 0x0D, 0xE7, 0x15, 0x7A, 0xBC, 0x68, 0x63, 0x39, 0xE9, 0x01, 0xC3, 0x03, 0x1E, 0xFB], round_keys[3]);
    assert_eq!([0xA1, 0x12, 0x02, 0xC9, 0xB4, 0x68, 0xBE, 0xA1, 0xD7, 0x51, 0x57, 0xA0, 0x14, 0x52, 0x49, 0x5B], round_keys[4]);
    assert_eq!([0xB1, 0x29, 0x3B, 0x33, 0x05, 0x41, 0x85, 0x92, 0xD2, 0x10, 0xD2, 0x32, 0xC6, 0x42, 0x9B, 0x69], round_keys[5]);
    assert_eq!([0xBD, 0x3D, 0xC2, 0x87, 0xB8, 0x7C, 0x47, 0x15, 0x6A, 0x6C, 0x95, 0x27, 0xAC, 0x2E, 0x0E, 0x4E], round_keys[6]);
    assert_eq!([0xCC, 0x96, 0xED, 0x16, 0x74, 0xEA, 0xAA, 0x03, 0x1E, 0x86, 0x3F, 0x24, 0xB2, 0xA8, 0x31, 0x6A], round_keys[7]);
    assert_eq!([0x8E, 0x51, 0xEF, 0x21, 0xFA, 0xBB, 0x45, 0x22, 0xE4, 0x3D, 0x7A, 0x06, 0x56, 0x95, 0x4B, 0x6C], round_keys[8]);
    assert_eq!([0xBF, 0xE2, 0xBF, 0x90, 0x45, 0x59, 0xFA, 0xB2, 0xA1, 0x64, 0x80, 0xB4, 0xF7, 0xF1, 0xCB, 0xD8], round_keys[9]);
    assert_eq!([0x28, 0xFD, 0xDE, 0xF8, 0x6D, 0xA4, 0x24, 0x4A, 0xCC, 0xC0, 0xA4, 0xFE, 0x3B, 0x31, 0x6F, 0x26], round_keys[10]);
}